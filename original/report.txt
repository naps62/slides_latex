
Pretende-se desenvolver um analisador de gram´ticas atrav´s da utiliza¸~o de XAGra a e ca e JAVA no ^mbito de automatizar algumas tarefas fulcrais na an´lise de gram´ticas, prina a a cipalmente em gram´ticas de atributos. Ao longo deste relat´rio ser~o abordadas as v´rias a o a a estrat´gias para a obten¸ao da tabela de identificadores e grafo de depend^ncias, para o e c~ e c´lculo das diferentes m´tricas e t´cnicas de slicing. a e e Numa primeira abordagem, a gram´tica ´ apresentada de uma forma gen´rica atrav´s da a e e e linguagem XAGra, baseada em XML, para ser poss´ criar um linguagem interm´dia para ivel e an´lise das diversas gram´ticas. Durante o parsing da gram´tica ´ recolhida a informa¸ao a a a e c~ necess´ria para a constru¸ao da tabela de identificadores e para o desenvolvimento do grafo a c~ de depend^ncias. O mecanismo de parsing foi formulado e desenvolvido em JAVA. Este tipo e de ferramentas n~o s~o muito usuais apesar de estes serem passos extremamente necess´rios a a a para a avalia¸ao de uma gram´tica por isso s~o necess´rios confrontos de estrat´gias como as c~ a a a e que foram abordadas ao longo das aulas, que permitam criar uma aplica¸ao o mais gen´rica c~ e e precisa poss´ ivel. Este relat´rio vai servir como TEXteste. o

Este projecto veio no seguimentos dos anteriores, j´ que depois de feito o estudo sobre a as m´tricas ´ nos pedido que fa¸amos o c´lculo das mesmas atrav´s do processamento de e e c a e gram´ticas de atributos. a Este processo divide-se em tr^s passos, o primeiro ´ o armazenamento dos s´ e e imbolos e de toda a informa¸~o relevante aos mesmos, numa estrutura de dados designada por tabela ca de identificadores. A escolha desta estrutura ´ livre mesmo que normalmente esta seja um e mapeamento. O segundo passo implica calcular as m´tricas de tamanho relativamente a e ` gram´tica e o terceiro a representa¸~o textual e gr´fica do grafo de depend^ncias. a ca a e Al´m destas funcionalidades foi-nos tamb´m proposto dar a possibilidade ao utilizador de e e poder manipular a gram´tica com o uso de v´rias t´cnicas, como por exemplo o slicing de a a e uma gram´tica. a

Neste primeiro exemplo pretende-se analisar gram´ticas, escritas de acordo com a metaa gram´tica descrita no anexo A. Para efeitos de an´lise pretende-se extrair, armazenar e a a visualizar a seguinte informa¸~o: ca 1. Tabela de identificadores 2. Grafo de depend^ncias e 3. C´lculo dos v´rios tipos de m´tricas a a e 4. Slicing de uma gram´tica a 5. Remo¸ao das produ¸oes in´teis da gram´tica c~ c~ u a




No nosso entender a tabela de identificadores tem que conter o m´ximo de informa¸~o poss´ a ca ivel de forma aos resultados serem o mais rico poss´ iveis. Para isso decidimos implementar uma tabela de identificadores que distingue os v´rios tipos de s´ a imbolos inseridos e permite que a informa¸ao associada dependa do tipo de s´ c~ imbolo que encontramos. A nossa tabela permite-nos armazenar, dependendo do tipo do s´ imbolo (Terminal, N~oa Terminal, etc.), a seguinte informa¸ao: c~

S´ imbolo Terminal S´ imbolo N~o-Terminal a 1 Express~o Regular a Tipo de Recursividade 2 Lista de Pais Lista de Pais 3 Lista de Atributos N´mero de Alternativas u 4 Lista de Right Hand Side 5 Total de S´ imbolos do Lado Direito 6 Lista de Atributos

Al´m desta informa¸ao toda decidimos tamb´m representar um grafo na tabela de identie c~ e ficadores, ou seja, cada entrada da tabela tem um nodo que cont^m uma lista de todos os e nodos do grafo que dele dependem. Desta forma podemos ter f´cil acesso a qualquer parte do a grafo sem termos que fazer pesquisas na tabela. Mais a frente neste relat´rio vamos explicar ` o melhor a import^ncia deste grafo tamb´m no c´lculo das m´tricas. a e a e Associada ` tabela existe um campo para guardar a ra´ da gram´tica e outro para guardar a iz a o nome da mesma. Adicionar estes campos, parecendo que n~o, reduz imenso os acessos a "in´teis"` tabela, por exemplo, sempre que precisarmos de aceder ` ra´ da gram´tica (para u a a iz a gerar o grafo de depend^ncias, para calcular a forma da recursividade com uma s´ travessia, e o etc.) temos que percorrer a tabela ` procura da entrada onda a lista de pais ´ igual ` lista a e a vazia.


Com o intuito de facilitar a organiza¸ao e a apresenta¸ao dos resultados dos c´lculos, dec~ c~ a cidimos criar um objecto que guarda todos os resultados e que executa todos os c´lculos a interm´dios. Estes c´lculos podem ser feitos individualmente ou em conjunto. e a As m´tricas implementadas no seu todo at´ ao momento s~o as m´tricas de tamanho relativas e e a e a gram´tica e as m´tricas de forma. As outras ainda n~o est~o totalmente implementadas ` a e a a devido ao simples facto de necessitarem de informa¸ao auxiliar (por exemplo, necessitar de c~





Neste tipo de m´tricas verificamos a legibilidade dos s´ e imbolos n~o-terminais e terminais, nesa tes ultimos ainda fizemos a distin¸ao entre as express~es regulares e as palavras reservadas ´ c~ o e sinais. Como seria imposs´ fazer uma verifica¸~o destas sem sequer sabermos em que contexto ivel ca estamos ent~o, para estes c´lculos poderem ser feitos ´ imposto como requisito de entrada a a e uma base de conhecimento com v´rias palavras no contexto da gram´tica. Com este tipo de a a input j´ nos ´ poss´ percorrer todos os s´ a e ivel imbolos da gram´tica a estudar e verificar a sua a legibilidade. A implementa¸~o n~o ´ muito mais que isso. S´ temos que ter em conta que quando encontraca a e o mos um s´ imbolo etiquetado com "Terminal" ou "NonTerminal" ent~o, temos que actualizar a os resultados. Este processo de actualizar resultados ´ uma forma de o fazer mas n~o a unica e a ´ nem talvez a mais precisa. A forma como actualizamos os resultados ´ implementado desta forma: e · se o identificador do s´ imbolo est´ contido no conjunto de palavras do contexto ent~o ´ a a e um s´ imbolo extenso; · sen~o temos que verificar se o identificador do s´ a imbolo est´ contido nalguma das paa lavras do conjunto, ficande este como um s´ imbolo abreviado. Isto pode ocorrer das seguintes formas: ­ o s´ imbolo abreviado ocorre como uma sequ^ncia no s´ e imbolo extenso; ­ os s´ imbolos que comp^e o s´ o imbolo abreviado aparecem dispersados no s´ imbolo extenso.



Slicing para S´ imbolos

Dividimos este problema em dois mais pequenos de forma a tornar o c´digo mais leg´ e o ivel o menos complexo poss´ ivel. Primeiro marcamos todos os nodos que pertencem ao slicing e s´ depois percorremos o grafo imprimindo-o com a nota¸~o dot1 (isto em qualquer um dos o ca slicings). Para marcar os nodos temos que percorrer o grafo a partir do nodo que nos foi dado, se for forward usamos o grafo de depend^ncias sen~o utilizamos o RHS de cada produ¸ao (o e a c~ c´digo abaixo ´ para o forward slicing). Usando o grafo s´ temos que seguir todos os camio e o nhos e evitar s´ aqueles que nos levam a nodos j´ vistos, j´ isto n~o acontece se usarmos a o a a a lista de RHS j´ que temos que encontrar todos os caminhos poss´ a iveis para a ra´ do grafo, iz evitando ent~o todos os caminhos que n~o fa¸am parte desses percursos. Neste caso de slia a c cing, se o s´ imbolo em que nos encontramos ainda n~o faz parte do resultado e o seu pai j´ a a foi processado, ent~o este recebe o valor de marca¸ao do pai. Se um s´ a c~ imbolo recursivo, que j´ foi processado, pertence ao slicing ent~o isto permite-nos que todos os s´ a a imbolos que de este dependem, tamb´m pertencam. e Para imprimir o grafo, ´ preciso fazer uma simples travessia ao grafo mas tendo em conta e que podemos ter v´rios caminhos entre s´ a imbolos adjacentes. Todos os que tiverem marcados ser~o impressos com uma diferente cor e com a seta direccionada tendo em conta o tipo de a slicing escolhido, claro sem alterar as direc¸~es do grafo de depend^ncias. co e Se o grafo representar um slicing de uma gram´tica para um determinado s´ a imbolo, ent~o ´ a e necess´rio fazer os passos tanto de um forward slicing como de um backward slicing. a Depois disto ´ necess´rio desmarcar todos os nodos para evitar, por exemplo, o utilizae a dor requisitar um backward slicing e aparecerem caminhos marcados porque antes tinha sido feito um forward slicing.


Primeiro, e antes de tudo, n~o sei se reparaste que esta sec¸~o n~o aparece no ´ a ca a indice. Muito provavelmente deves estar agora a ver se realmente n~o aparece no ´ a indice e a pensar como ´ poss´ e ivel isso acontecer j´ que este ´ gerado automaticamente pelo comando a e \tableofcontents.
A Esta sec¸ao tem como unico prop´sito testares os teus conhecimentos de L TEX . Esta c~ ´ o ferramenta vai ser bastante util durante o teu percurso acad´mico (ou assim o esperamos). ´ e

Comecemos por centrar o texto. . . Fourscore and seven years ago our fathers brought forth on this continent a new nation, conceived in liberty and dedicated to the proposition that all men are created equal. Agora alinhamos ` esquerda. . . a Now we are engaged in a great civil war, testing whether that nation or any nation so conceived and so dedicated can long endure. We are met on a great battlefield of that war. We have come to dedicate a portion of it as a final resting place for those who died here that the nation might live. This we may, in all propriety do. But in a larger sense, we cannot dedicate, we cannot consecrate, we cannot hallow this ground. The brave men, living and dead who struggled here have hallowed it far above our poor power to add or detract. The world will little note nor long remember what we say here, but it can never forget what they did here. E agora ` direita. . . a It is rather for us the living, we here be dedicated to the great task remaining before us­that from these honored dead we take increased devotion to that cause for which they here gave the last full measure of devotion­that we here highly resolve that these dead shall not have died in vain, that this nation shall have a new birth of freedom, and that government of the people, by the people, for the people shall not perish from the earth. Vamos agora brincar um pouco com equa¸oes. Podemos usar as seguintes suc~ cess~es: o n(n + 1) 2 n(n + 1)(2n + 1) = 6 2 n (n + 1)2 = 4


